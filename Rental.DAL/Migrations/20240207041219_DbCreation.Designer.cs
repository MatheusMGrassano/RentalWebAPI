// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Rental.DAL.DataContext;

#nullable disable

namespace Rental.DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240207041219_DbCreation")]
    partial class DbCreation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Rental.DAL.Entities.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Admin");
                });

            modelBuilder.Entity("Rental.DAL.Entities.Driver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Licence")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<string>>("LicenceType")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Driver");
                });

            modelBuilder.Entity("Rental.DAL.Entities.Motorcycle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Available")
                        .HasColumnType("boolean");

                    b.Property<int>("ManufactureYear")
                        .HasColumnType("integer");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Plate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Motorcycle");
                });

            modelBuilder.Entity("Rental.DAL.Entities.Rent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpectedEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RentDriverId")
                        .HasColumnType("integer");

                    b.Property<int>("RentMotorcycleId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("RentDriverId");

                    b.HasIndex("RentMotorcycleId");

                    b.ToTable("Rent");
                });

            modelBuilder.Entity("Rental.DAL.Entities.Rent", b =>
                {
                    b.HasOne("Rental.DAL.Entities.Driver", "RentDriver")
                        .WithMany()
                        .HasForeignKey("RentDriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Rental.DAL.Entities.Motorcycle", "RentMotorcycle")
                        .WithMany()
                        .HasForeignKey("RentMotorcycleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Rental.DAL.Entities.Records.Plan", "RentPlan", b1 =>
                        {
                            b1.Property<int>("RentId")
                                .HasColumnType("integer");

                            b1.Property<int>("Days")
                                .HasColumnType("integer")
                                .HasColumnName("Days");

                            b1.Property<double>("Fee")
                                .HasColumnType("double precision")
                                .HasColumnName("Fee");

                            b1.Property<decimal>("Price")
                                .HasColumnType("numeric")
                                .HasColumnName("Price");

                            b1.HasKey("RentId");

                            b1.ToTable("Rent");

                            b1.WithOwner()
                                .HasForeignKey("RentId");
                        });

                    b.Navigation("RentDriver");

                    b.Navigation("RentMotorcycle");

                    b.Navigation("RentPlan")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
